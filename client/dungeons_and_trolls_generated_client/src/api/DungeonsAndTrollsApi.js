/**
 * Dungeons and Trolls
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DungeonsandtrollsAttributes from '../model/DungeonsandtrollsAttributes';
import DungeonsandtrollsAvailableLevels from '../model/DungeonsandtrollsAvailableLevels';
import DungeonsandtrollsCommandsBatch from '../model/DungeonsandtrollsCommandsBatch';
import DungeonsandtrollsCommandsForMonsters from '../model/DungeonsandtrollsCommandsForMonsters';
import DungeonsandtrollsGameState from '../model/DungeonsandtrollsGameState';
import DungeonsandtrollsIdentifier from '../model/DungeonsandtrollsIdentifier';
import DungeonsandtrollsIdentifiers from '../model/DungeonsandtrollsIdentifiers';
import DungeonsandtrollsMessage from '../model/DungeonsandtrollsMessage';
import DungeonsandtrollsPlayersInfo from '../model/DungeonsandtrollsPlayersInfo';
import DungeonsandtrollsPosition from '../model/DungeonsandtrollsPosition';
import DungeonsandtrollsRegistration from '../model/DungeonsandtrollsRegistration';
import DungeonsandtrollsSkillUse from '../model/DungeonsandtrollsSkillUse';
import DungeonsandtrollsUser from '../model/DungeonsandtrollsUser';
import RpcStatus from '../model/RpcStatus';

/**
* DungeonsAndTrolls service.
* @module api/DungeonsAndTrollsApi
* @version 1.7.0
*/
export default class DungeonsAndTrollsApi {

    /**
    * Constructs a new DungeonsAndTrollsApi. 
    * @alias module:api/DungeonsAndTrollsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dungeonsAndTrollsAssignSkillPoints operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsAssignSkillPointsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send multiple commands to the Character bound to the logged user. The order of execution is defined in the message.
     * @param {module:model/DungeonsandtrollsAttributes} attributes 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsAssignSkillPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsAssignSkillPoints(attributes, opts, callback) {
      opts = opts || {};
      let postBody = attributes;
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling dungeonsAndTrollsAssignSkillPoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/assign-skill-points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsBuy operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsBuyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buy Items identified by the provided ID for the Character bound to the logged user.
     * @param {module:model/DungeonsandtrollsIdentifiers} identifiers 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsBuyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsBuy(identifiers, opts, callback) {
      opts = opts || {};
      let postBody = identifiers;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling dungeonsAndTrollsBuy");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/buy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsCommands operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsCommandsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send multiple commands to the Character bound to the logged user. The order of execution is defined in the message.
     * @param {module:model/DungeonsandtrollsCommandsBatch} commandsBatch 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsCommands(commandsBatch, opts, callback) {
      opts = opts || {};
      let postBody = commandsBatch;
      // verify the required parameter 'commandsBatch' is set
      if (commandsBatch === undefined || commandsBatch === null) {
        throw new Error("Missing the required parameter 'commandsBatch' when calling dungeonsAndTrollsCommands");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsGame operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsGameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DungeonsandtrollsGameState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends all info about the game.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default false
     * @param {Boolean} opts.items default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsGameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DungeonsandtrollsGameState}
     */
    dungeonsAndTrollsGame(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking'],
        'items': opts['items']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DungeonsandtrollsGameState;
      return this.apiClient.callApi(
        '/v1/game', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsGameLevel operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsGameLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DungeonsandtrollsGameState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends all info about the game level.
     * @param {Number} level 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default false
     * @param {Boolean} opts.items default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsGameLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DungeonsandtrollsGameState}
     */
    dungeonsAndTrollsGameLevel(level, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling dungeonsAndTrollsGameLevel");
      }

      let pathParams = {
        'level': level
      };
      let queryParams = {
        'blocking': opts['blocking'],
        'items': opts['items']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DungeonsandtrollsGameState;
      return this.apiClient.callApi(
        '/v1/game/{level}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsLevels operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsLevelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DungeonsandtrollsAvailableLevels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends info about
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default false
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DungeonsandtrollsAvailableLevels}
     */
    dungeonsAndTrollsLevels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DungeonsandtrollsAvailableLevels;
      return this.apiClient.callApi(
        '/v1/levels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsMonstersCommands operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsMonstersCommandsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Control monsters. Admin only.
     * @param {module:model/DungeonsandtrollsCommandsForMonsters} commandsForMonsters 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsMonstersCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsMonstersCommands(commandsForMonsters, opts, callback) {
      opts = opts || {};
      let postBody = commandsForMonsters;
      // verify the required parameter 'commandsForMonsters' is set
      if (commandsForMonsters === undefined || commandsForMonsters === null) {
        throw new Error("Missing the required parameter 'commandsForMonsters' when calling dungeonsAndTrollsMonstersCommands");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/monsters-commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsMove operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsMoveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign skill point to the attribute for the Character bound to the logged user.
     * @param {module:model/DungeonsandtrollsPosition} position 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsMoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsMove(position, opts, callback) {
      opts = opts || {};
      let postBody = position;
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling dungeonsAndTrollsMove");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsPickUp operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsPickUpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Equip the Item from the ground identified by the provided ID for the Character bound to the logged user (unused).
     * @param {module:model/DungeonsandtrollsIdentifier} identifier 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsPickUpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsPickUp(identifier, opts, callback) {
      opts = opts || {};
      let postBody = identifier;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling dungeonsAndTrollsPickUp");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/pick-up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsPlayers operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsPlayersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DungeonsandtrollsPlayersInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends all info about all players.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default false
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DungeonsandtrollsPlayersInfo}
     */
    dungeonsAndTrollsPlayers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DungeonsandtrollsPlayersInfo;
      return this.apiClient.callApi(
        '/v1/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsRegister operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DungeonsandtrollsRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register provided User to the Game and create a character.
     * @param {module:model/DungeonsandtrollsUser} body 
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DungeonsandtrollsRegistration}
     */
    dungeonsAndTrollsRegister(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling dungeonsAndTrollsRegister");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DungeonsandtrollsRegistration;
      return this.apiClient.callApi(
        '/v1/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsRespawn operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsRespawnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respawn the Character bound to the logged user.
     * @param {Object.<String, Object>} respawn 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsRespawnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsRespawn(respawn, opts, callback) {
      opts = opts || {};
      let postBody = respawn;
      // verify the required parameter 'respawn' is set
      if (respawn === undefined || respawn === null) {
        throw new Error("Missing the required parameter 'respawn' when calling dungeonsAndTrollsRespawn");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/respawn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsSkill operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsSkillCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use a skill (provided by an item) by the Character bound to the logged user.
     * @param {module:model/DungeonsandtrollsSkillUse} skillUse 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsSkillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsSkill(skillUse, opts, callback) {
      opts = opts || {};
      let postBody = skillUse;
      // verify the required parameter 'skillUse' is set
      if (skillUse === undefined || skillUse === null) {
        throw new Error("Missing the required parameter 'skillUse' when calling dungeonsAndTrollsSkill");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/skill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dungeonsAndTrollsYell operation.
     * @callback module:api/DungeonsAndTrollsApi~dungeonsAndTrollsYellCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Character bound to the logged user yells a messages (visible for everyone).
     * @param {module:model/DungeonsandtrollsMessage} message 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.blocking default true
     * @param {module:api/DungeonsAndTrollsApi~dungeonsAndTrollsYellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dungeonsAndTrollsYell(message, opts, callback) {
      opts = opts || {};
      let postBody = message;
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling dungeonsAndTrollsYell");
      }

      let pathParams = {
      };
      let queryParams = {
        'blocking': opts['blocking']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/yell', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
