/**
 * Dungeons and Trolls
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DungeonsandtrollsCharacter from './DungeonsandtrollsCharacter';
import DungeonsandtrollsEvent from './DungeonsandtrollsEvent';
import DungeonsandtrollsItem from './DungeonsandtrollsItem';
import DungeonsandtrollsMap from './DungeonsandtrollsMap';
import DungeonsandtrollsPosition from './DungeonsandtrollsPosition';

/**
 * The DungeonsandtrollsGameState model module.
 * @module model/DungeonsandtrollsGameState
 * @version 1.7.0
 */
class DungeonsandtrollsGameState {
    /**
     * Constructs a new <code>DungeonsandtrollsGameState</code>.
     * @alias module:model/DungeonsandtrollsGameState
     */
    constructor() { 
        
        DungeonsandtrollsGameState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DungeonsandtrollsGameState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DungeonsandtrollsGameState} obj Optional instance to populate.
     * @return {module:model/DungeonsandtrollsGameState} The populated <code>DungeonsandtrollsGameState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DungeonsandtrollsGameState();

            if (data.hasOwnProperty('map')) {
                obj['map'] = DungeonsandtrollsMap.constructFromObject(data['map']);
            }
            if (data.hasOwnProperty('shopItems')) {
                obj['shopItems'] = ApiClient.convertToType(data['shopItems'], [DungeonsandtrollsItem]);
            }
            if (data.hasOwnProperty('character')) {
                obj['character'] = DungeonsandtrollsCharacter.constructFromObject(data['character']);
            }
            if (data.hasOwnProperty('currentPosition')) {
                obj['currentPosition'] = DungeonsandtrollsPosition.constructFromObject(data['currentPosition']);
            }
            if (data.hasOwnProperty('currentLevel')) {
                obj['currentLevel'] = ApiClient.convertToType(data['currentLevel'], 'Number');
            }
            if (data.hasOwnProperty('tick')) {
                obj['tick'] = ApiClient.convertToType(data['tick'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [DungeonsandtrollsEvent]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('maxLevel')) {
                obj['maxLevel'] = ApiClient.convertToType(data['maxLevel'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/DungeonsandtrollsMap} map
 */
DungeonsandtrollsGameState.prototype['map'] = undefined;

/**
 * @member {Array.<module:model/DungeonsandtrollsItem>} shopItems
 */
DungeonsandtrollsGameState.prototype['shopItems'] = undefined;

/**
 * @member {module:model/DungeonsandtrollsCharacter} character
 */
DungeonsandtrollsGameState.prototype['character'] = undefined;

/**
 * @member {module:model/DungeonsandtrollsPosition} currentPosition
 */
DungeonsandtrollsGameState.prototype['currentPosition'] = undefined;

/**
 * @member {Number} currentLevel
 */
DungeonsandtrollsGameState.prototype['currentLevel'] = undefined;

/**
 * @member {Number} tick
 */
DungeonsandtrollsGameState.prototype['tick'] = undefined;

/**
 * List of events which occurred in the previous tick. Useful for visualising effects, debugging and communication.
 * @member {Array.<module:model/DungeonsandtrollsEvent>} events
 */
DungeonsandtrollsGameState.prototype['events'] = undefined;

/**
 * @member {Number} score
 */
DungeonsandtrollsGameState.prototype['score'] = undefined;

/**
 * @member {Number} maxLevel
 */
DungeonsandtrollsGameState.prototype['maxLevel'] = undefined;






export default DungeonsandtrollsGameState;

